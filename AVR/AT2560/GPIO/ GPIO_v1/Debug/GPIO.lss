
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000dc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d4c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800200  00800200  00000dc0  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  00000dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eba  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002d8a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d9c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	9d c0       	rjmp	.+314    	; 0x13c <__dtors_end>
   2:	00 00       	nop
   4:	bc c0       	rjmp	.+376    	; 0x17e <__bad_interrupt>
   6:	00 00       	nop
   8:	ba c0       	rjmp	.+372    	; 0x17e <__bad_interrupt>
   a:	00 00       	nop
   c:	b8 c0       	rjmp	.+368    	; 0x17e <__bad_interrupt>
   e:	00 00       	nop
  10:	b6 c0       	rjmp	.+364    	; 0x17e <__bad_interrupt>
  12:	00 00       	nop
  14:	b4 c0       	rjmp	.+360    	; 0x17e <__bad_interrupt>
  16:	00 00       	nop
  18:	b2 c0       	rjmp	.+356    	; 0x17e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b0 c0       	rjmp	.+352    	; 0x17e <__bad_interrupt>
  1e:	00 00       	nop
  20:	ae c0       	rjmp	.+348    	; 0x17e <__bad_interrupt>
  22:	00 00       	nop
  24:	ac c0       	rjmp	.+344    	; 0x17e <__bad_interrupt>
  26:	00 00       	nop
  28:	aa c0       	rjmp	.+340    	; 0x17e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a8 c0       	rjmp	.+336    	; 0x17e <__bad_interrupt>
  2e:	00 00       	nop
  30:	a6 c0       	rjmp	.+332    	; 0x17e <__bad_interrupt>
  32:	00 00       	nop
  34:	a4 c0       	rjmp	.+328    	; 0x17e <__bad_interrupt>
  36:	00 00       	nop
  38:	a2 c0       	rjmp	.+324    	; 0x17e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a0 c0       	rjmp	.+320    	; 0x17e <__bad_interrupt>
  3e:	00 00       	nop
  40:	9e c0       	rjmp	.+316    	; 0x17e <__bad_interrupt>
  42:	00 00       	nop
  44:	9c c0       	rjmp	.+312    	; 0x17e <__bad_interrupt>
  46:	00 00       	nop
  48:	9a c0       	rjmp	.+308    	; 0x17e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	98 c0       	rjmp	.+304    	; 0x17e <__bad_interrupt>
  4e:	00 00       	nop
  50:	96 c0       	rjmp	.+300    	; 0x17e <__bad_interrupt>
  52:	00 00       	nop
  54:	94 c0       	rjmp	.+296    	; 0x17e <__bad_interrupt>
  56:	00 00       	nop
  58:	92 c0       	rjmp	.+292    	; 0x17e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	90 c0       	rjmp	.+288    	; 0x17e <__bad_interrupt>
  5e:	00 00       	nop
  60:	8e c0       	rjmp	.+284    	; 0x17e <__bad_interrupt>
  62:	00 00       	nop
  64:	8c c0       	rjmp	.+280    	; 0x17e <__bad_interrupt>
  66:	00 00       	nop
  68:	8a c0       	rjmp	.+276    	; 0x17e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	88 c0       	rjmp	.+272    	; 0x17e <__bad_interrupt>
  6e:	00 00       	nop
  70:	86 c0       	rjmp	.+268    	; 0x17e <__bad_interrupt>
  72:	00 00       	nop
  74:	84 c0       	rjmp	.+264    	; 0x17e <__bad_interrupt>
  76:	00 00       	nop
  78:	82 c0       	rjmp	.+260    	; 0x17e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	80 c0       	rjmp	.+256    	; 0x17e <__bad_interrupt>
  7e:	00 00       	nop
  80:	7e c0       	rjmp	.+252    	; 0x17e <__bad_interrupt>
  82:	00 00       	nop
  84:	7c c0       	rjmp	.+248    	; 0x17e <__bad_interrupt>
  86:	00 00       	nop
  88:	7a c0       	rjmp	.+244    	; 0x17e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	78 c0       	rjmp	.+240    	; 0x17e <__bad_interrupt>
  8e:	00 00       	nop
  90:	76 c0       	rjmp	.+236    	; 0x17e <__bad_interrupt>
  92:	00 00       	nop
  94:	74 c0       	rjmp	.+232    	; 0x17e <__bad_interrupt>
  96:	00 00       	nop
  98:	72 c0       	rjmp	.+228    	; 0x17e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	70 c0       	rjmp	.+224    	; 0x17e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	6e c0       	rjmp	.+220    	; 0x17e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	6c c0       	rjmp	.+216    	; 0x17e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	6a c0       	rjmp	.+212    	; 0x17e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	68 c0       	rjmp	.+208    	; 0x17e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	66 c0       	rjmp	.+204    	; 0x17e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	64 c0       	rjmp	.+200    	; 0x17e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	62 c0       	rjmp	.+196    	; 0x17e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	60 c0       	rjmp	.+192    	; 0x17e <__bad_interrupt>
  be:	00 00       	nop
  c0:	5e c0       	rjmp	.+188    	; 0x17e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	5c c0       	rjmp	.+184    	; 0x17e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	5a c0       	rjmp	.+180    	; 0x17e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	58 c0       	rjmp	.+176    	; 0x17e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	56 c0       	rjmp	.+172    	; 0x17e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	54 c0       	rjmp	.+168    	; 0x17e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	52 c0       	rjmp	.+164    	; 0x17e <__bad_interrupt>
  da:	00 00       	nop
  dc:	50 c0       	rjmp	.+160    	; 0x17e <__bad_interrupt>
  de:	00 00       	nop
  e0:	4e c0       	rjmp	.+156    	; 0x17e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	e9 00       	.word	0x00e9	; ????
  e6:	e9 00       	.word	0x00e9	; ????
  e8:	22 01       	movw	r4, r4
  ea:	22 01       	movw	r4, r4
  ec:	5d 01       	movw	r10, r26
  ee:	96 01       	movw	r18, r12
  f0:	cf 01       	movw	r24, r30
  f2:	cf 01       	movw	r24, r30
  f4:	cf 01       	movw	r24, r30
  f6:	cf 01       	movw	r24, r30
  f8:	0a 02       	muls	r16, r26
  fa:	0a 02       	muls	r16, r26
  fc:	0a 02       	muls	r16, r26
  fe:	0a 02       	muls	r16, r26
 100:	7b 02       	muls	r23, r27
 102:	7b 02       	muls	r23, r27
 104:	7b 02       	muls	r23, r27
 106:	7b 02       	muls	r23, r27
 108:	af 02       	muls	r26, r31
 10a:	7b 02       	muls	r23, r27
 10c:	e3 02       	muls	r30, r19
 10e:	e3 02       	muls	r30, r19
 110:	e3 02       	muls	r30, r19
 112:	e3 02       	muls	r30, r19
 114:	17 03       	mulsu	r17, r23
 116:	17 03       	mulsu	r17, r23
 118:	17 03       	mulsu	r17, r23
 11a:	17 03       	mulsu	r17, r23
 11c:	84 03       	fmuls	r16, r20
 11e:	84 03       	fmuls	r16, r20
 120:	84 03       	fmuls	r16, r20
 122:	84 03       	fmuls	r16, r20
 124:	96 03       	fmuls	r17, r22
 126:	84 03       	fmuls	r16, r20
 128:	a8 03       	fmulsu	r18, r16
 12a:	a8 03       	fmulsu	r18, r16
 12c:	a8 03       	fmulsu	r18, r16
 12e:	a8 03       	fmulsu	r18, r16
 130:	ba 03       	fmulsu	r19, r18
 132:	ba 03       	fmulsu	r19, r18
 134:	ba 03       	fmulsu	r19, r18
 136:	ba 03       	fmulsu	r19, r18

00000138 <__ctors_start>:
 138:	69 05       	cpc	r22, r9

0000013a <__ctors_end>:
 13a:	75 05       	cpc	r23, r5

0000013c <__dtors_end>:
 13c:	11 24       	eor	r1, r1
 13e:	1f be       	out	0x3f, r1	; 63
 140:	cf ef       	ldi	r28, 0xFF	; 255
 142:	d1 e2       	ldi	r29, 0x21	; 33
 144:	de bf       	out	0x3e, r29	; 62
 146:	cd bf       	out	0x3d, r28	; 61
 148:	00 e0       	ldi	r16, 0x00	; 0
 14a:	0c bf       	out	0x3c, r16	; 60

0000014c <__do_clear_bss>:
 14c:	22 e0       	ldi	r18, 0x02	; 2
 14e:	a0 e0       	ldi	r26, 0x00	; 0
 150:	b2 e0       	ldi	r27, 0x02	; 2
 152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
 154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
 156:	a4 30       	cpi	r26, 0x04	; 4
 158:	b2 07       	cpc	r27, r18
 15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>

0000015c <__do_global_ctors>:
 15c:	10 e0       	ldi	r17, 0x00	; 0
 15e:	cd e9       	ldi	r28, 0x9D	; 157
 160:	d0 e0       	ldi	r29, 0x00	; 0
 162:	00 e0       	ldi	r16, 0x00	; 0
 164:	05 c0       	rjmp	.+10     	; 0x170 <__do_global_ctors+0x14>
 166:	21 97       	sbiw	r28, 0x01	; 1
 168:	01 09       	sbc	r16, r1
 16a:	80 2f       	mov	r24, r16
 16c:	fe 01       	movw	r30, r28
 16e:	c9 d4       	rcall	.+2450   	; 0xb02 <__tablejump2__>
 170:	cc 39       	cpi	r28, 0x9C	; 156
 172:	d1 07       	cpc	r29, r17
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	08 07       	cpc	r16, r24
 178:	b1 f7       	brne	.-20     	; 0x166 <__do_global_ctors+0xa>
 17a:	13 d3       	rcall	.+1574   	; 0x7a2 <main>
 17c:	d6 c5       	rjmp	.+2988   	; 0xd2a <__do_global_dtors>

0000017e <__bad_interrupt>:
 17e:	40 cf       	rjmp	.-384    	; 0x0 <__vectors>

00000180 <_ZN4GPIOC1EhNS_15PortDirection_tE>:
#include <avr/io.h>
#include "gpio.h"

GPIO::GPIO(uint8_t id, PortDirection_t dir):
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	00 d0       	rcall	.+0      	; 0x186 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x6>
 186:	1f 92       	push	r1
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	9a 83       	std	Y+2, r25	; 0x02
 18e:	89 83       	std	Y+1, r24	; 0x01
 190:	6b 83       	std	Y+3, r22	; 0x03
 192:	4c 83       	std	Y+4, r20	; 0x04
_id(id)
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	9a 81       	ldd	r25, Y+2	; 0x02
 198:	2b 81       	ldd	r18, Y+3	; 0x03
 19a:	fc 01       	movw	r30, r24
 19c:	21 83       	std	Z+1, r18	; 0x01
{
	switch (_id) {
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	9a 81       	ldd	r25, Y+2	; 0x02
 1a2:	fc 01       	movw	r30, r24
 1a4:	81 81       	ldd	r24, Z+1	; 0x01
 1a6:	88 2f       	mov	r24, r24
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	09 2e       	mov	r0, r25
 1ac:	00 0c       	add	r0, r0
 1ae:	aa 0b       	sbc	r26, r26
 1b0:	bb 0b       	sbc	r27, r27
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	2d e0       	ldi	r18, 0x0D	; 13
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	84 1b       	sub	r24, r20
 1bc:	95 0b       	sbc	r25, r21
 1be:	28 17       	cp	r18, r24
 1c0:	39 07       	cpc	r19, r25
 1c2:	08 f4       	brcc	.+2      	; 0x1c6 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x46>
 1c4:	62 c1       	rjmp	.+708    	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
 1c6:	fc 01       	movw	r30, r24
 1c8:	88 27       	eor	r24, r24
 1ca:	ee 58       	subi	r30, 0x8E	; 142
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	8f 4f       	sbci	r24, 0xFF	; 255
 1d0:	98 c4       	rjmp	.+2352   	; 0xb02 <__tablejump2__>
	case 0:
	case 1:
		_bit = id;
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	9a 81       	ldd	r25, Y+2	; 0x02
 1d6:	2b 81       	ldd	r18, Y+3	; 0x03
 1d8:	fc 01       	movw	r30, r24
 1da:	20 83       	st	Z, r18
		if (dir)
 1dc:	8c 81       	ldd	r24, Y+4	; 0x04
 1de:	88 23       	and	r24, r24
 1e0:	c1 f0       	breq	.+48     	; 0x212 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x92>
			DDRE |= (1 << _bit);
 1e2:	8d e2       	ldi	r24, 0x2D	; 45
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	2d e2       	ldi	r18, 0x2D	; 45
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	f9 01       	movw	r30, r18
 1ec:	20 81       	ld	r18, Z
 1ee:	62 2f       	mov	r22, r18
 1f0:	29 81       	ldd	r18, Y+1	; 0x01
 1f2:	3a 81       	ldd	r19, Y+2	; 0x02
 1f4:	f9 01       	movw	r30, r18
 1f6:	20 81       	ld	r18, Z
 1f8:	42 2f       	mov	r20, r18
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x86>
 202:	22 0f       	add	r18, r18
 204:	33 1f       	adc	r19, r19
 206:	4a 95       	dec	r20
 208:	e2 f7       	brpl	.-8      	; 0x202 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x82>
 20a:	26 2b       	or	r18, r22
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18
		else
			DDRE &= ~(1 << _bit);
		break;
 210:	3c c1       	rjmp	.+632    	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
	case 1:
		_bit = id;
		if (dir)
			DDRE |= (1 << _bit);
		else
			DDRE &= ~(1 << _bit);
 212:	8d e2       	ldi	r24, 0x2D	; 45
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	2d e2       	ldi	r18, 0x2D	; 45
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	f9 01       	movw	r30, r18
 21c:	20 81       	ld	r18, Z
 21e:	62 2f       	mov	r22, r18
 220:	29 81       	ldd	r18, Y+1	; 0x01
 222:	3a 81       	ldd	r19, Y+2	; 0x02
 224:	f9 01       	movw	r30, r18
 226:	20 81       	ld	r18, Z
 228:	42 2f       	mov	r20, r18
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <_ZN4GPIOC1EhNS_15PortDirection_tE+0xb6>
 232:	22 0f       	add	r18, r18
 234:	33 1f       	adc	r19, r19
 236:	4a 95       	dec	r20
 238:	e2 f7       	brpl	.-8      	; 0x232 <_ZN4GPIOC1EhNS_15PortDirection_tE+0xb2>
 23a:	20 95       	com	r18
 23c:	26 23       	and	r18, r22
 23e:	fc 01       	movw	r30, r24
 240:	20 83       	st	Z, r18
		break;
 242:	23 c1       	rjmp	.+582    	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
	case 2:
	case 3:
		_bit = id + 2;
 244:	8b 81       	ldd	r24, Y+3	; 0x03
 246:	22 e0       	ldi	r18, 0x02	; 2
 248:	28 0f       	add	r18, r24
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	9a 81       	ldd	r25, Y+2	; 0x02
 24e:	fc 01       	movw	r30, r24
 250:	20 83       	st	Z, r18
		if (dir)
 252:	8c 81       	ldd	r24, Y+4	; 0x04
 254:	88 23       	and	r24, r24
 256:	c1 f0       	breq	.+48     	; 0x288 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x108>
			DDRE |= (1 << _bit);
 258:	8d e2       	ldi	r24, 0x2D	; 45
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	2d e2       	ldi	r18, 0x2D	; 45
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	f9 01       	movw	r30, r18
 262:	20 81       	ld	r18, Z
 264:	62 2f       	mov	r22, r18
 266:	29 81       	ldd	r18, Y+1	; 0x01
 268:	3a 81       	ldd	r19, Y+2	; 0x02
 26a:	f9 01       	movw	r30, r18
 26c:	20 81       	ld	r18, Z
 26e:	42 2f       	mov	r20, r18
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <_ZN4GPIOC1EhNS_15PortDirection_tE+0xfc>
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
 27c:	4a 95       	dec	r20
 27e:	e2 f7       	brpl	.-8      	; 0x278 <_ZN4GPIOC1EhNS_15PortDirection_tE+0xf8>
 280:	26 2b       	or	r18, r22
 282:	fc 01       	movw	r30, r24
 284:	20 83       	st	Z, r18
		else
			DDRE &= ~(1 << _bit);
		break;
 286:	01 c1       	rjmp	.+514    	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
	case 3:
		_bit = id + 2;
		if (dir)
			DDRE |= (1 << _bit);
		else
			DDRE &= ~(1 << _bit);
 288:	8d e2       	ldi	r24, 0x2D	; 45
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	2d e2       	ldi	r18, 0x2D	; 45
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	f9 01       	movw	r30, r18
 292:	20 81       	ld	r18, Z
 294:	62 2f       	mov	r22, r18
 296:	29 81       	ldd	r18, Y+1	; 0x01
 298:	3a 81       	ldd	r19, Y+2	; 0x02
 29a:	f9 01       	movw	r30, r18
 29c:	20 81       	ld	r18, Z
 29e:	42 2f       	mov	r20, r18
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <_ZN4GPIOC1EhNS_15PortDirection_tE+0x12c>
 2a8:	22 0f       	add	r18, r18
 2aa:	33 1f       	adc	r19, r19
 2ac:	4a 95       	dec	r20
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x128>
 2b0:	20 95       	com	r18
 2b2:	26 23       	and	r18, r22
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18
		break;
 2b8:	e8 c0       	rjmp	.+464    	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
	case 4:
		_bit = DDG5;
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	9a 81       	ldd	r25, Y+2	; 0x02
 2be:	25 e0       	ldi	r18, 0x05	; 5
 2c0:	fc 01       	movw	r30, r24
 2c2:	20 83       	st	Z, r18
		if (dir)
 2c4:	8c 81       	ldd	r24, Y+4	; 0x04
 2c6:	88 23       	and	r24, r24
 2c8:	c1 f0       	breq	.+48     	; 0x2fa <_ZN4GPIOC1EhNS_15PortDirection_tE+0x17a>
			DDRG |= (1 << _bit);
 2ca:	83 e3       	ldi	r24, 0x33	; 51
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	23 e3       	ldi	r18, 0x33	; 51
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	f9 01       	movw	r30, r18
 2d4:	20 81       	ld	r18, Z
 2d6:	62 2f       	mov	r22, r18
 2d8:	29 81       	ldd	r18, Y+1	; 0x01
 2da:	3a 81       	ldd	r19, Y+2	; 0x02
 2dc:	f9 01       	movw	r30, r18
 2de:	20 81       	ld	r18, Z
 2e0:	42 2f       	mov	r20, r18
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <_ZN4GPIOC1EhNS_15PortDirection_tE+0x16e>
 2ea:	22 0f       	add	r18, r18
 2ec:	33 1f       	adc	r19, r19
 2ee:	4a 95       	dec	r20
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <_ZN4GPIOC1EhNS_15PortDirection_tE+0x16a>
 2f2:	26 2b       	or	r18, r22
 2f4:	fc 01       	movw	r30, r24
 2f6:	20 83       	st	Z, r18
		else
			DDRG &= ~(1 << _bit);
		break;
 2f8:	c8 c0       	rjmp	.+400    	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
	case 4:
		_bit = DDG5;
		if (dir)
			DDRG |= (1 << _bit);
		else
			DDRG &= ~(1 << _bit);
 2fa:	83 e3       	ldi	r24, 0x33	; 51
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	23 e3       	ldi	r18, 0x33	; 51
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	f9 01       	movw	r30, r18
 304:	20 81       	ld	r18, Z
 306:	62 2f       	mov	r22, r18
 308:	29 81       	ldd	r18, Y+1	; 0x01
 30a:	3a 81       	ldd	r19, Y+2	; 0x02
 30c:	f9 01       	movw	r30, r18
 30e:	20 81       	ld	r18, Z
 310:	42 2f       	mov	r20, r18
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	21 e0       	ldi	r18, 0x01	; 1
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <_ZN4GPIOC1EhNS_15PortDirection_tE+0x19e>
 31a:	22 0f       	add	r18, r18
 31c:	33 1f       	adc	r19, r19
 31e:	4a 95       	dec	r20
 320:	e2 f7       	brpl	.-8      	; 0x31a <_ZN4GPIOC1EhNS_15PortDirection_tE+0x19a>
 322:	20 95       	com	r18
 324:	26 23       	and	r18, r22
 326:	fc 01       	movw	r30, r24
 328:	20 83       	st	Z, r18
		break;
 32a:	af c0       	rjmp	.+350    	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>

	case 5:
		_bit = DDE3;
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	9a 81       	ldd	r25, Y+2	; 0x02
 330:	23 e0       	ldi	r18, 0x03	; 3
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
		if (dir)
 336:	8c 81       	ldd	r24, Y+4	; 0x04
 338:	88 23       	and	r24, r24
 33a:	c1 f0       	breq	.+48     	; 0x36c <_ZN4GPIOC1EhNS_15PortDirection_tE+0x1ec>
			DDRE |= (1 << _bit);
 33c:	8d e2       	ldi	r24, 0x2D	; 45
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	2d e2       	ldi	r18, 0x2D	; 45
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	f9 01       	movw	r30, r18
 346:	20 81       	ld	r18, Z
 348:	62 2f       	mov	r22, r18
 34a:	29 81       	ldd	r18, Y+1	; 0x01
 34c:	3a 81       	ldd	r19, Y+2	; 0x02
 34e:	f9 01       	movw	r30, r18
 350:	20 81       	ld	r18, Z
 352:	42 2f       	mov	r20, r18
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x1e0>
 35c:	22 0f       	add	r18, r18
 35e:	33 1f       	adc	r19, r19
 360:	4a 95       	dec	r20
 362:	e2 f7       	brpl	.-8      	; 0x35c <_ZN4GPIOC1EhNS_15PortDirection_tE+0x1dc>
 364:	26 2b       	or	r18, r22
 366:	fc 01       	movw	r30, r24
 368:	20 83       	st	Z, r18
		else
			DDRE &= ~(1 << _bit);
		break;
 36a:	8f c0       	rjmp	.+286    	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
	case 5:
		_bit = DDE3;
		if (dir)
			DDRE |= (1 << _bit);
		else
			DDRE &= ~(1 << _bit);
 36c:	8d e2       	ldi	r24, 0x2D	; 45
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	2d e2       	ldi	r18, 0x2D	; 45
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	f9 01       	movw	r30, r18
 376:	20 81       	ld	r18, Z
 378:	62 2f       	mov	r22, r18
 37a:	29 81       	ldd	r18, Y+1	; 0x01
 37c:	3a 81       	ldd	r19, Y+2	; 0x02
 37e:	f9 01       	movw	r30, r18
 380:	20 81       	ld	r18, Z
 382:	42 2f       	mov	r20, r18
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	21 e0       	ldi	r18, 0x01	; 1
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x210>
 38c:	22 0f       	add	r18, r18
 38e:	33 1f       	adc	r19, r19
 390:	4a 95       	dec	r20
 392:	e2 f7       	brpl	.-8      	; 0x38c <_ZN4GPIOC1EhNS_15PortDirection_tE+0x20c>
 394:	20 95       	com	r18
 396:	26 23       	and	r18, r22
 398:	fc 01       	movw	r30, r24
 39a:	20 83       	st	Z, r18
		break;
 39c:	76 c0       	rjmp	.+236    	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>

	case 6:
	case 7:
	case 8:
	case 9:
		_bit = id - 3;
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	2d ef       	ldi	r18, 0xFD	; 253
 3a2:	28 0f       	add	r18, r24
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	9a 81       	ldd	r25, Y+2	; 0x02
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
		if (dir)
 3ac:	8c 81       	ldd	r24, Y+4	; 0x04
 3ae:	88 23       	and	r24, r24
 3b0:	c1 f0       	breq	.+48     	; 0x3e2 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x262>
			DDRH |= (1 << _bit);
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	31 e0       	ldi	r19, 0x01	; 1
 3ba:	f9 01       	movw	r30, r18
 3bc:	20 81       	ld	r18, Z
 3be:	62 2f       	mov	r22, r18
 3c0:	29 81       	ldd	r18, Y+1	; 0x01
 3c2:	3a 81       	ldd	r19, Y+2	; 0x02
 3c4:	f9 01       	movw	r30, r18
 3c6:	20 81       	ld	r18, Z
 3c8:	42 2f       	mov	r20, r18
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	21 e0       	ldi	r18, 0x01	; 1
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x256>
 3d2:	22 0f       	add	r18, r18
 3d4:	33 1f       	adc	r19, r19
 3d6:	4a 95       	dec	r20
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x252>
 3da:	26 2b       	or	r18, r22
 3dc:	fc 01       	movw	r30, r24
 3de:	20 83       	st	Z, r18
		else
			DDRH &= ~(1 << _bit);
		break;
 3e0:	54 c0       	rjmp	.+168    	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
	case 9:
		_bit = id - 3;
		if (dir)
			DDRH |= (1 << _bit);
		else
			DDRH &= ~(1 << _bit);
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	31 e0       	ldi	r19, 0x01	; 1
 3ea:	f9 01       	movw	r30, r18
 3ec:	20 81       	ld	r18, Z
 3ee:	62 2f       	mov	r22, r18
 3f0:	29 81       	ldd	r18, Y+1	; 0x01
 3f2:	3a 81       	ldd	r19, Y+2	; 0x02
 3f4:	f9 01       	movw	r30, r18
 3f6:	20 81       	ld	r18, Z
 3f8:	42 2f       	mov	r20, r18
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	21 e0       	ldi	r18, 0x01	; 1
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
 402:	22 0f       	add	r18, r18
 404:	33 1f       	adc	r19, r19
 406:	4a 95       	dec	r20
 408:	e2 f7       	brpl	.-8      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 40a:	20 95       	com	r18
 40c:	26 23       	and	r18, r22
 40e:	fc 01       	movw	r30, r24
 410:	20 83       	st	Z, r18
		break;
 412:	3b c0       	rjmp	.+118    	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
	case 10:
	case 11:
	case 12:
	case 13:
		_bit = id - 6;
 414:	8b 81       	ldd	r24, Y+3	; 0x03
 416:	2a ef       	ldi	r18, 0xFA	; 250
 418:	28 0f       	add	r18, r24
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	9a 81       	ldd	r25, Y+2	; 0x02
 41e:	fc 01       	movw	r30, r24
 420:	20 83       	st	Z, r18
		if (dir)
 422:	8c 81       	ldd	r24, Y+4	; 0x04
 424:	88 23       	and	r24, r24
 426:	c1 f0       	breq	.+48     	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
			DDRB |= (1 << _bit);
 428:	84 e2       	ldi	r24, 0x24	; 36
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	24 e2       	ldi	r18, 0x24	; 36
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	f9 01       	movw	r30, r18
 432:	20 81       	ld	r18, Z
 434:	62 2f       	mov	r22, r18
 436:	29 81       	ldd	r18, Y+1	; 0x01
 438:	3a 81       	ldd	r19, Y+2	; 0x02
 43a:	f9 01       	movw	r30, r18
 43c:	20 81       	ld	r18, Z
 43e:	42 2f       	mov	r20, r18
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
 448:	22 0f       	add	r18, r18
 44a:	33 1f       	adc	r19, r19
 44c:	4a 95       	dec	r20
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
 450:	26 2b       	or	r18, r22
 452:	fc 01       	movw	r30, r24
 454:	20 83       	st	Z, r18
 456:	18 c0       	rjmp	.+48     	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
		else
			DDRB &= ~(1 << _bit);
 458:	84 e2       	ldi	r24, 0x24	; 36
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	24 e2       	ldi	r18, 0x24	; 36
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	f9 01       	movw	r30, r18
 462:	20 81       	ld	r18, Z
 464:	62 2f       	mov	r22, r18
 466:	29 81       	ldd	r18, Y+1	; 0x01
 468:	3a 81       	ldd	r19, Y+2	; 0x02
 46a:	f9 01       	movw	r30, r18
 46c:	20 81       	ld	r18, Z
 46e:	42 2f       	mov	r20, r18
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
 478:	22 0f       	add	r18, r18
 47a:	33 1f       	adc	r19, r19
 47c:	4a 95       	dec	r20
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
 480:	20 95       	com	r18
 482:	26 23       	and	r18, r22
 484:	fc 01       	movw	r30, r24
 486:	20 83       	st	Z, r18
		break;
 488:	00 00       	nop
	}
}
 48a:	0f 90       	pop	r0
 48c:	0f 90       	pop	r0
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	08 95       	ret

00000498 <_ZN4GPIOD1Ev>:

GPIO::~GPIO() {}
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	1f 92       	push	r1
 49e:	1f 92       	push	r1
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	9a 83       	std	Y+2, r25	; 0x02
 4a6:	89 83       	std	Y+1, r24	; 0x01
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <_ZN4GPIO3setEb>:
	case 13:
		return (bool) PINB & (1 << _bit);
	}
}

void GPIO::set(bool val) {
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	00 d0       	rcall	.+0      	; 0x4b8 <_ZN4GPIO3setEb+0x6>
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	9a 83       	std	Y+2, r25	; 0x02
 4be:	89 83       	std	Y+1, r24	; 0x01
 4c0:	6b 83       	std	Y+3, r22	; 0x03
	switch (_id) {
 4c2:	89 81       	ldd	r24, Y+1	; 0x01
 4c4:	9a 81       	ldd	r25, Y+2	; 0x02
 4c6:	fc 01       	movw	r30, r24
 4c8:	81 81       	ldd	r24, Z+1	; 0x01
 4ca:	88 2f       	mov	r24, r24
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	09 2e       	mov	r0, r25
 4d0:	00 0c       	add	r0, r0
 4d2:	aa 0b       	sbc	r26, r26
 4d4:	bb 0b       	sbc	r27, r27
 4d6:	40 e0       	ldi	r20, 0x00	; 0
 4d8:	50 e0       	ldi	r21, 0x00	; 0
 4da:	2d e0       	ldi	r18, 0x0D	; 13
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	84 1b       	sub	r24, r20
 4e0:	95 0b       	sbc	r25, r21
 4e2:	28 17       	cp	r18, r24
 4e4:	39 07       	cpc	r19, r25
 4e6:	08 f4       	brcc	.+2      	; 0x4ea <_ZN4GPIO3setEb+0x38>
 4e8:	d6 c0       	rjmp	.+428    	; 0x696 <_ZN4GPIO3setEb+0x1e4>
 4ea:	fc 01       	movw	r30, r24
 4ec:	88 27       	eor	r24, r24
 4ee:	e0 58       	subi	r30, 0x80	; 128
 4f0:	ff 4f       	sbci	r31, 0xFF	; 255
 4f2:	8f 4f       	sbci	r24, 0xFF	; 255
 4f4:	06 c3       	rjmp	.+1548   	; 0xb02 <__tablejump2__>
	case 0:
	case 1:
	case 2:
	case 3:
	case 5:
		if (val)
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	88 23       	and	r24, r24
 4fa:	c1 f0       	breq	.+48     	; 0x52c <_ZN4GPIO3setEb+0x7a>
			PORTE |= (1 << _bit);
 4fc:	8e e2       	ldi	r24, 0x2E	; 46
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	2e e2       	ldi	r18, 0x2E	; 46
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	f9 01       	movw	r30, r18
 506:	20 81       	ld	r18, Z
 508:	62 2f       	mov	r22, r18
 50a:	29 81       	ldd	r18, Y+1	; 0x01
 50c:	3a 81       	ldd	r19, Y+2	; 0x02
 50e:	f9 01       	movw	r30, r18
 510:	20 81       	ld	r18, Z
 512:	42 2f       	mov	r20, r18
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	21 e0       	ldi	r18, 0x01	; 1
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	02 c0       	rjmp	.+4      	; 0x520 <_ZN4GPIO3setEb+0x6e>
 51c:	22 0f       	add	r18, r18
 51e:	33 1f       	adc	r19, r19
 520:	4a 95       	dec	r20
 522:	e2 f7       	brpl	.-8      	; 0x51c <_ZN4GPIO3setEb+0x6a>
 524:	26 2b       	or	r18, r22
 526:	fc 01       	movw	r30, r24
 528:	20 83       	st	Z, r18
		else
			PORTE &= ~(1 << _bit);
		break;
 52a:	b5 c0       	rjmp	.+362    	; 0x696 <_ZN4GPIO3setEb+0x1e4>
	case 3:
	case 5:
		if (val)
			PORTE |= (1 << _bit);
		else
			PORTE &= ~(1 << _bit);
 52c:	8e e2       	ldi	r24, 0x2E	; 46
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	2e e2       	ldi	r18, 0x2E	; 46
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	f9 01       	movw	r30, r18
 536:	20 81       	ld	r18, Z
 538:	62 2f       	mov	r22, r18
 53a:	29 81       	ldd	r18, Y+1	; 0x01
 53c:	3a 81       	ldd	r19, Y+2	; 0x02
 53e:	f9 01       	movw	r30, r18
 540:	20 81       	ld	r18, Z
 542:	42 2f       	mov	r20, r18
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	21 e0       	ldi	r18, 0x01	; 1
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <_ZN4GPIO3setEb+0x9e>
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	4a 95       	dec	r20
 552:	e2 f7       	brpl	.-8      	; 0x54c <_ZN4GPIO3setEb+0x9a>
 554:	20 95       	com	r18
 556:	26 23       	and	r18, r22
 558:	fc 01       	movw	r30, r24
 55a:	20 83       	st	Z, r18
		break;
 55c:	9c c0       	rjmp	.+312    	; 0x696 <_ZN4GPIO3setEb+0x1e4>
	case 4:
		if (val)
 55e:	8b 81       	ldd	r24, Y+3	; 0x03
 560:	88 23       	and	r24, r24
 562:	c1 f0       	breq	.+48     	; 0x594 <_ZN4GPIO3setEb+0xe2>
			PORTG |= (1 << _bit);
 564:	84 e3       	ldi	r24, 0x34	; 52
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	24 e3       	ldi	r18, 0x34	; 52
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	f9 01       	movw	r30, r18
 56e:	20 81       	ld	r18, Z
 570:	62 2f       	mov	r22, r18
 572:	29 81       	ldd	r18, Y+1	; 0x01
 574:	3a 81       	ldd	r19, Y+2	; 0x02
 576:	f9 01       	movw	r30, r18
 578:	20 81       	ld	r18, Z
 57a:	42 2f       	mov	r20, r18
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	21 e0       	ldi	r18, 0x01	; 1
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <_ZN4GPIO3setEb+0xd6>
 584:	22 0f       	add	r18, r18
 586:	33 1f       	adc	r19, r19
 588:	4a 95       	dec	r20
 58a:	e2 f7       	brpl	.-8      	; 0x584 <_ZN4GPIO3setEb+0xd2>
 58c:	26 2b       	or	r18, r22
 58e:	fc 01       	movw	r30, r24
 590:	20 83       	st	Z, r18
		else
			PORTG &= ~(1 << _bit);
		break;
 592:	81 c0       	rjmp	.+258    	; 0x696 <_ZN4GPIO3setEb+0x1e4>
		break;
	case 4:
		if (val)
			PORTG |= (1 << _bit);
		else
			PORTG &= ~(1 << _bit);
 594:	84 e3       	ldi	r24, 0x34	; 52
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	24 e3       	ldi	r18, 0x34	; 52
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	f9 01       	movw	r30, r18
 59e:	20 81       	ld	r18, Z
 5a0:	62 2f       	mov	r22, r18
 5a2:	29 81       	ldd	r18, Y+1	; 0x01
 5a4:	3a 81       	ldd	r19, Y+2	; 0x02
 5a6:	f9 01       	movw	r30, r18
 5a8:	20 81       	ld	r18, Z
 5aa:	42 2f       	mov	r20, r18
 5ac:	50 e0       	ldi	r21, 0x00	; 0
 5ae:	21 e0       	ldi	r18, 0x01	; 1
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <_ZN4GPIO3setEb+0x106>
 5b4:	22 0f       	add	r18, r18
 5b6:	33 1f       	adc	r19, r19
 5b8:	4a 95       	dec	r20
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <_ZN4GPIO3setEb+0x102>
 5bc:	20 95       	com	r18
 5be:	26 23       	and	r18, r22
 5c0:	fc 01       	movw	r30, r24
 5c2:	20 83       	st	Z, r18
		break;
 5c4:	68 c0       	rjmp	.+208    	; 0x696 <_ZN4GPIO3setEb+0x1e4>
	case 6:
	case 7:
	case 8:
	case 9:
		if (val)
 5c6:	8b 81       	ldd	r24, Y+3	; 0x03
 5c8:	88 23       	and	r24, r24
 5ca:	c1 f0       	breq	.+48     	; 0x5fc <_ZN4GPIO3setEb+0x14a>
			PORTH |= (1 << _bit);
 5cc:	82 e0       	ldi	r24, 0x02	; 2
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	22 e0       	ldi	r18, 0x02	; 2
 5d2:	31 e0       	ldi	r19, 0x01	; 1
 5d4:	f9 01       	movw	r30, r18
 5d6:	20 81       	ld	r18, Z
 5d8:	62 2f       	mov	r22, r18
 5da:	29 81       	ldd	r18, Y+1	; 0x01
 5dc:	3a 81       	ldd	r19, Y+2	; 0x02
 5de:	f9 01       	movw	r30, r18
 5e0:	20 81       	ld	r18, Z
 5e2:	42 2f       	mov	r20, r18
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	21 e0       	ldi	r18, 0x01	; 1
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <_ZN4GPIO3setEb+0x13e>
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	4a 95       	dec	r20
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <_ZN4GPIO3setEb+0x13a>
 5f4:	26 2b       	or	r18, r22
 5f6:	fc 01       	movw	r30, r24
 5f8:	20 83       	st	Z, r18
		else
			PORTH &= ~(1 << _bit);
		break;
 5fa:	4d c0       	rjmp	.+154    	; 0x696 <_ZN4GPIO3setEb+0x1e4>
	case 8:
	case 9:
		if (val)
			PORTH |= (1 << _bit);
		else
			PORTH &= ~(1 << _bit);
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	22 e0       	ldi	r18, 0x02	; 2
 602:	31 e0       	ldi	r19, 0x01	; 1
 604:	f9 01       	movw	r30, r18
 606:	20 81       	ld	r18, Z
 608:	62 2f       	mov	r22, r18
 60a:	29 81       	ldd	r18, Y+1	; 0x01
 60c:	3a 81       	ldd	r19, Y+2	; 0x02
 60e:	f9 01       	movw	r30, r18
 610:	20 81       	ld	r18, Z
 612:	42 2f       	mov	r20, r18
 614:	50 e0       	ldi	r21, 0x00	; 0
 616:	21 e0       	ldi	r18, 0x01	; 1
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <_ZN4GPIO3setEb+0x16e>
 61c:	22 0f       	add	r18, r18
 61e:	33 1f       	adc	r19, r19
 620:	4a 95       	dec	r20
 622:	e2 f7       	brpl	.-8      	; 0x61c <_ZN4GPIO3setEb+0x16a>
 624:	20 95       	com	r18
 626:	26 23       	and	r18, r22
 628:	fc 01       	movw	r30, r24
 62a:	20 83       	st	Z, r18
		break;
 62c:	34 c0       	rjmp	.+104    	; 0x696 <_ZN4GPIO3setEb+0x1e4>
	case 10:
	case 11:
	case 12:
	case 13:
		if (val)
 62e:	8b 81       	ldd	r24, Y+3	; 0x03
 630:	88 23       	and	r24, r24
 632:	c1 f0       	breq	.+48     	; 0x664 <_ZN4GPIO3setEb+0x1b2>
			PORTB |= (1 << _bit);
 634:	85 e2       	ldi	r24, 0x25	; 37
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	25 e2       	ldi	r18, 0x25	; 37
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	f9 01       	movw	r30, r18
 63e:	20 81       	ld	r18, Z
 640:	62 2f       	mov	r22, r18
 642:	29 81       	ldd	r18, Y+1	; 0x01
 644:	3a 81       	ldd	r19, Y+2	; 0x02
 646:	f9 01       	movw	r30, r18
 648:	20 81       	ld	r18, Z
 64a:	42 2f       	mov	r20, r18
 64c:	50 e0       	ldi	r21, 0x00	; 0
 64e:	21 e0       	ldi	r18, 0x01	; 1
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <_ZN4GPIO3setEb+0x1a6>
 654:	22 0f       	add	r18, r18
 656:	33 1f       	adc	r19, r19
 658:	4a 95       	dec	r20
 65a:	e2 f7       	brpl	.-8      	; 0x654 <_ZN4GPIO3setEb+0x1a2>
 65c:	26 2b       	or	r18, r22
 65e:	fc 01       	movw	r30, r24
 660:	20 83       	st	Z, r18
 662:	18 c0       	rjmp	.+48     	; 0x694 <_ZN4GPIO3setEb+0x1e2>
		else
			PORTB &= ~(1 << _bit);
 664:	85 e2       	ldi	r24, 0x25	; 37
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	25 e2       	ldi	r18, 0x25	; 37
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	f9 01       	movw	r30, r18
 66e:	20 81       	ld	r18, Z
 670:	62 2f       	mov	r22, r18
 672:	29 81       	ldd	r18, Y+1	; 0x01
 674:	3a 81       	ldd	r19, Y+2	; 0x02
 676:	f9 01       	movw	r30, r18
 678:	20 81       	ld	r18, Z
 67a:	42 2f       	mov	r20, r18
 67c:	50 e0       	ldi	r21, 0x00	; 0
 67e:	21 e0       	ldi	r18, 0x01	; 1
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <_ZN4GPIO3setEb+0x1d6>
 684:	22 0f       	add	r18, r18
 686:	33 1f       	adc	r19, r19
 688:	4a 95       	dec	r20
 68a:	e2 f7       	brpl	.-8      	; 0x684 <_ZN4GPIO3setEb+0x1d2>
 68c:	20 95       	com	r18
 68e:	26 23       	and	r18, r22
 690:	fc 01       	movw	r30, r24
 692:	20 83       	st	Z, r18
		break;
 694:	00 00       	nop
	}
}
 696:	0f 90       	pop	r0
 698:	0f 90       	pop	r0
 69a:	0f 90       	pop	r0
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	08 95       	ret

000006a2 <_ZN4GPIO5clearEv>:

void GPIO::clear() {
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	1f 92       	push	r1
 6a8:	1f 92       	push	r1
 6aa:	cd b7       	in	r28, 0x3d	; 61
 6ac:	de b7       	in	r29, 0x3e	; 62
 6ae:	9a 83       	std	Y+2, r25	; 0x02
 6b0:	89 83       	std	Y+1, r24	; 0x01
	this->set(0);
 6b2:	89 81       	ldd	r24, Y+1	; 0x01
 6b4:	9a 81       	ldd	r25, Y+2	; 0x02
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	fc de       	rcall	.-520    	; 0x4b2 <_ZN4GPIO3setEb>
}
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	08 95       	ret

000006c4 <_ZN4GPIO6toggleEv>:

void GPIO::toggle() {
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	1f 92       	push	r1
 6ca:	1f 92       	push	r1
 6cc:	cd b7       	in	r28, 0x3d	; 61
 6ce:	de b7       	in	r29, 0x3e	; 62
 6d0:	9a 83       	std	Y+2, r25	; 0x02
 6d2:	89 83       	std	Y+1, r24	; 0x01
	switch (_id) {
 6d4:	89 81       	ldd	r24, Y+1	; 0x01
 6d6:	9a 81       	ldd	r25, Y+2	; 0x02
 6d8:	fc 01       	movw	r30, r24
 6da:	81 81       	ldd	r24, Z+1	; 0x01
 6dc:	88 2f       	mov	r24, r24
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	09 2e       	mov	r0, r25
 6e2:	00 0c       	add	r0, r0
 6e4:	aa 0b       	sbc	r26, r26
 6e6:	bb 0b       	sbc	r27, r27
 6e8:	40 e0       	ldi	r20, 0x00	; 0
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	2d e0       	ldi	r18, 0x0D	; 13
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	84 1b       	sub	r24, r20
 6f2:	95 0b       	sbc	r25, r21
 6f4:	28 17       	cp	r18, r24
 6f6:	39 07       	cpc	r19, r25
 6f8:	08 f4       	brcc	.+2      	; 0x6fc <_ZN4GPIO6toggleEv+0x38>
 6fa:	4e c0       	rjmp	.+156    	; 0x798 <_ZN4GPIO6toggleEv+0xd4>
 6fc:	fc 01       	movw	r30, r24
 6fe:	88 27       	eor	r24, r24
 700:	e2 57       	subi	r30, 0x72	; 114
 702:	ff 4f       	sbci	r31, 0xFF	; 255
 704:	8f 4f       	sbci	r24, 0xFF	; 255
 706:	fd c1       	rjmp	.+1018   	; 0xb02 <__tablejump2__>
	case 0:
	case 1:
	case 2:
	case 3:
	case 5:
		PINE = (1 << _bit);
 708:	8c e2       	ldi	r24, 0x2C	; 44
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	29 81       	ldd	r18, Y+1	; 0x01
 70e:	3a 81       	ldd	r19, Y+2	; 0x02
 710:	f9 01       	movw	r30, r18
 712:	20 81       	ld	r18, Z
 714:	42 2f       	mov	r20, r18
 716:	50 e0       	ldi	r21, 0x00	; 0
 718:	21 e0       	ldi	r18, 0x01	; 1
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	02 c0       	rjmp	.+4      	; 0x722 <_ZN4GPIO6toggleEv+0x5e>
 71e:	22 0f       	add	r18, r18
 720:	33 1f       	adc	r19, r19
 722:	4a 95       	dec	r20
 724:	e2 f7       	brpl	.-8      	; 0x71e <_ZN4GPIO6toggleEv+0x5a>
 726:	fc 01       	movw	r30, r24
 728:	20 83       	st	Z, r18
		break;
 72a:	36 c0       	rjmp	.+108    	; 0x798 <_ZN4GPIO6toggleEv+0xd4>
	case 4:
		PING = (1 << _bit);
 72c:	82 e3       	ldi	r24, 0x32	; 50
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	29 81       	ldd	r18, Y+1	; 0x01
 732:	3a 81       	ldd	r19, Y+2	; 0x02
 734:	f9 01       	movw	r30, r18
 736:	20 81       	ld	r18, Z
 738:	42 2f       	mov	r20, r18
 73a:	50 e0       	ldi	r21, 0x00	; 0
 73c:	21 e0       	ldi	r18, 0x01	; 1
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	02 c0       	rjmp	.+4      	; 0x746 <_ZN4GPIO6toggleEv+0x82>
 742:	22 0f       	add	r18, r18
 744:	33 1f       	adc	r19, r19
 746:	4a 95       	dec	r20
 748:	e2 f7       	brpl	.-8      	; 0x742 <_ZN4GPIO6toggleEv+0x7e>
 74a:	fc 01       	movw	r30, r24
 74c:	20 83       	st	Z, r18
		break;
 74e:	24 c0       	rjmp	.+72     	; 0x798 <_ZN4GPIO6toggleEv+0xd4>
	case 6:
	case 7:
	case 8:
	case 9:
		PINH = (1 << _bit);
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	91 e0       	ldi	r25, 0x01	; 1
 754:	29 81       	ldd	r18, Y+1	; 0x01
 756:	3a 81       	ldd	r19, Y+2	; 0x02
 758:	f9 01       	movw	r30, r18
 75a:	20 81       	ld	r18, Z
 75c:	42 2f       	mov	r20, r18
 75e:	50 e0       	ldi	r21, 0x00	; 0
 760:	21 e0       	ldi	r18, 0x01	; 1
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <_ZN4GPIO6toggleEv+0xa6>
 766:	22 0f       	add	r18, r18
 768:	33 1f       	adc	r19, r19
 76a:	4a 95       	dec	r20
 76c:	e2 f7       	brpl	.-8      	; 0x766 <_ZN4GPIO6toggleEv+0xa2>
 76e:	fc 01       	movw	r30, r24
 770:	20 83       	st	Z, r18
		break;
 772:	12 c0       	rjmp	.+36     	; 0x798 <_ZN4GPIO6toggleEv+0xd4>
	case 10:
	case 11:
	case 12:
	case 13:
		PINB = (1 << _bit);
 774:	83 e2       	ldi	r24, 0x23	; 35
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	29 81       	ldd	r18, Y+1	; 0x01
 77a:	3a 81       	ldd	r19, Y+2	; 0x02
 77c:	f9 01       	movw	r30, r18
 77e:	20 81       	ld	r18, Z
 780:	42 2f       	mov	r20, r18
 782:	50 e0       	ldi	r21, 0x00	; 0
 784:	21 e0       	ldi	r18, 0x01	; 1
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	02 c0       	rjmp	.+4      	; 0x78e <_ZN4GPIO6toggleEv+0xca>
 78a:	22 0f       	add	r18, r18
 78c:	33 1f       	adc	r19, r19
 78e:	4a 95       	dec	r20
 790:	e2 f7       	brpl	.-8      	; 0x78a <_ZN4GPIO6toggleEv+0xc6>
 792:	fc 01       	movw	r30, r24
 794:	20 83       	st	Z, r18
		break;
 796:	00 00       	nop
	}
}
 798:	0f 90       	pop	r0
 79a:	0f 90       	pop	r0
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	08 95       	ret

000007a2 <main>:
#include "gpio.h"

GPIO led0(0,   GPIO::OUTPUT); //PE0
GPIO led13(13, GPIO::OUTPUT); //PB7

int main(void){
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	aa 97       	sbiw	r28, 0x2a	; 42
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	f8 94       	cli
 7b0:	de bf       	out	0x3e, r29	; 62
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	cd bf       	out	0x3d, r28	; 61

	UCSR0B = 0;
 7b6:	81 ec       	ldi	r24, 0xC1	; 193
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	fc 01       	movw	r30, r24
 7bc:	10 82       	st	Z, r1

	led0.set(1);
 7be:	61 e0       	ldi	r22, 0x01	; 1
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	92 e0       	ldi	r25, 0x02	; 2
 7c4:	76 de       	rcall	.-788    	; 0x4b2 <_ZN4GPIO3setEb>
	led13.set(1);
 7c6:	61 e0       	ldi	r22, 0x01	; 1
 7c8:	82 e0       	ldi	r24, 0x02	; 2
 7ca:	92 e0       	ldi	r25, 0x02	; 2
 7cc:	72 de       	rcall	.-796    	; 0x4b2 <_ZN4GPIO3setEb>
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	aa e7       	ldi	r26, 0x7A	; 122
 7d4:	b4 e4       	ldi	r27, 0x44	; 68
 7d6:	89 83       	std	Y+1, r24	; 0x01
 7d8:	9a 83       	std	Y+2, r25	; 0x02
 7da:	ab 83       	std	Y+3, r26	; 0x03
 7dc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7de:	20 e0       	ldi	r18, 0x00	; 0
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	4a e7       	ldi	r20, 0x7A	; 122
 7e4:	55 e4       	ldi	r21, 0x45	; 69
 7e6:	69 81       	ldd	r22, Y+1	; 0x01
 7e8:	7a 81       	ldd	r23, Y+2	; 0x02
 7ea:	8b 81       	ldd	r24, Y+3	; 0x03
 7ec:	9c 81       	ldd	r25, Y+4	; 0x04
 7ee:	12 d2       	rcall	.+1060   	; 0xc14 <__mulsf3>
 7f0:	dc 01       	movw	r26, r24
 7f2:	cb 01       	movw	r24, r22
 7f4:	8d 83       	std	Y+5, r24	; 0x05
 7f6:	9e 83       	std	Y+6, r25	; 0x06
 7f8:	af 83       	std	Y+7, r26	; 0x07
 7fa:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 7fc:	20 e0       	ldi	r18, 0x00	; 0
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	40 e8       	ldi	r20, 0x80	; 128
 802:	5f e3       	ldi	r21, 0x3F	; 63
 804:	6d 81       	ldd	r22, Y+5	; 0x05
 806:	7e 81       	ldd	r23, Y+6	; 0x06
 808:	8f 81       	ldd	r24, Y+7	; 0x07
 80a:	98 85       	ldd	r25, Y+8	; 0x08
 80c:	82 d1       	rcall	.+772    	; 0xb12 <__cmpsf2>
 80e:	88 23       	and	r24, r24
 810:	2c f4       	brge	.+10     	; 0x81c <main+0x7a>
		__ticks = 1;
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	9a 87       	std	Y+10, r25	; 0x0a
 818:	89 87       	std	Y+9, r24	; 0x09
 81a:	3b c0       	rjmp	.+118    	; 0x892 <main+0xf0>
	else if (__tmp > 65535)
 81c:	20 e0       	ldi	r18, 0x00	; 0
 81e:	3f ef       	ldi	r19, 0xFF	; 255
 820:	4f e7       	ldi	r20, 0x7F	; 127
 822:	57 e4       	ldi	r21, 0x47	; 71
 824:	6d 81       	ldd	r22, Y+5	; 0x05
 826:	7e 81       	ldd	r23, Y+6	; 0x06
 828:	8f 81       	ldd	r24, Y+7	; 0x07
 82a:	98 85       	ldd	r25, Y+8	; 0x08
 82c:	ef d1       	rcall	.+990    	; 0xc0c <__gesf2>
 82e:	18 16       	cp	r1, r24
 830:	3c f5       	brge	.+78     	; 0x880 <main+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 832:	20 e0       	ldi	r18, 0x00	; 0
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	40 e2       	ldi	r20, 0x20	; 32
 838:	51 e4       	ldi	r21, 0x41	; 65
 83a:	69 81       	ldd	r22, Y+1	; 0x01
 83c:	7a 81       	ldd	r23, Y+2	; 0x02
 83e:	8b 81       	ldd	r24, Y+3	; 0x03
 840:	9c 81       	ldd	r25, Y+4	; 0x04
 842:	e8 d1       	rcall	.+976    	; 0xc14 <__mulsf3>
 844:	dc 01       	movw	r26, r24
 846:	cb 01       	movw	r24, r22
 848:	bc 01       	movw	r22, r24
 84a:	cd 01       	movw	r24, r26
 84c:	66 d1       	rcall	.+716    	; 0xb1a <__fixunssfsi>
 84e:	dc 01       	movw	r26, r24
 850:	cb 01       	movw	r24, r22
 852:	9a 87       	std	Y+10, r25	; 0x0a
 854:	89 87       	std	Y+9, r24	; 0x09
 856:	0f c0       	rjmp	.+30     	; 0x876 <main+0xd4>
 858:	80 e9       	ldi	r24, 0x90	; 144
 85a:	91 e0       	ldi	r25, 0x01	; 1
 85c:	9c 87       	std	Y+12, r25	; 0x0c
 85e:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 860:	8b 85       	ldd	r24, Y+11	; 0x0b
 862:	9c 85       	ldd	r25, Y+12	; 0x0c
 864:	01 97       	sbiw	r24, 0x01	; 1
 866:	f1 f7       	brne	.-4      	; 0x864 <main+0xc2>
 868:	9c 87       	std	Y+12, r25	; 0x0c
 86a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 86c:	89 85       	ldd	r24, Y+9	; 0x09
 86e:	9a 85       	ldd	r25, Y+10	; 0x0a
 870:	01 97       	sbiw	r24, 0x01	; 1
 872:	9a 87       	std	Y+10, r25	; 0x0a
 874:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 876:	89 85       	ldd	r24, Y+9	; 0x09
 878:	9a 85       	ldd	r25, Y+10	; 0x0a
 87a:	89 2b       	or	r24, r25
 87c:	69 f7       	brne	.-38     	; 0x858 <main+0xb6>
 87e:	13 c0       	rjmp	.+38     	; 0x8a6 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 880:	6d 81       	ldd	r22, Y+5	; 0x05
 882:	7e 81       	ldd	r23, Y+6	; 0x06
 884:	8f 81       	ldd	r24, Y+7	; 0x07
 886:	98 85       	ldd	r25, Y+8	; 0x08
 888:	48 d1       	rcall	.+656    	; 0xb1a <__fixunssfsi>
 88a:	dc 01       	movw	r26, r24
 88c:	cb 01       	movw	r24, r22
 88e:	9a 87       	std	Y+10, r25	; 0x0a
 890:	89 87       	std	Y+9, r24	; 0x09
 892:	89 85       	ldd	r24, Y+9	; 0x09
 894:	9a 85       	ldd	r25, Y+10	; 0x0a
 896:	9e 87       	std	Y+14, r25	; 0x0e
 898:	8d 87       	std	Y+13, r24	; 0x0d
 89a:	8d 85       	ldd	r24, Y+13	; 0x0d
 89c:	9e 85       	ldd	r25, Y+14	; 0x0e
 89e:	01 97       	sbiw	r24, 0x01	; 1
 8a0:	f1 f7       	brne	.-4      	; 0x89e <main+0xfc>
 8a2:	9e 87       	std	Y+14, r25	; 0x0e
 8a4:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);

	led0.clear();
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	92 e0       	ldi	r25, 0x02	; 2
 8aa:	fb de       	rcall	.-522    	; 0x6a2 <_ZN4GPIO5clearEv>
	led13.clear();
 8ac:	82 e0       	ldi	r24, 0x02	; 2
 8ae:	92 e0       	ldi	r25, 0x02	; 2
 8b0:	f8 de       	rcall	.-528    	; 0x6a2 <_ZN4GPIO5clearEv>
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	aa e7       	ldi	r26, 0x7A	; 122
 8b8:	b4 e4       	ldi	r27, 0x44	; 68
 8ba:	8f 87       	std	Y+15, r24	; 0x0f
 8bc:	98 8b       	std	Y+16, r25	; 0x10
 8be:	a9 8b       	std	Y+17, r26	; 0x11
 8c0:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 8c2:	20 e0       	ldi	r18, 0x00	; 0
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	4a e7       	ldi	r20, 0x7A	; 122
 8c8:	55 e4       	ldi	r21, 0x45	; 69
 8ca:	6f 85       	ldd	r22, Y+15	; 0x0f
 8cc:	78 89       	ldd	r23, Y+16	; 0x10
 8ce:	89 89       	ldd	r24, Y+17	; 0x11
 8d0:	9a 89       	ldd	r25, Y+18	; 0x12
 8d2:	a0 d1       	rcall	.+832    	; 0xc14 <__mulsf3>
 8d4:	dc 01       	movw	r26, r24
 8d6:	cb 01       	movw	r24, r22
 8d8:	8b 8b       	std	Y+19, r24	; 0x13
 8da:	9c 8b       	std	Y+20, r25	; 0x14
 8dc:	ad 8b       	std	Y+21, r26	; 0x15
 8de:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 8e0:	20 e0       	ldi	r18, 0x00	; 0
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	40 e8       	ldi	r20, 0x80	; 128
 8e6:	5f e3       	ldi	r21, 0x3F	; 63
 8e8:	6b 89       	ldd	r22, Y+19	; 0x13
 8ea:	7c 89       	ldd	r23, Y+20	; 0x14
 8ec:	8d 89       	ldd	r24, Y+21	; 0x15
 8ee:	9e 89       	ldd	r25, Y+22	; 0x16
 8f0:	10 d1       	rcall	.+544    	; 0xb12 <__cmpsf2>
 8f2:	88 23       	and	r24, r24
 8f4:	2c f4       	brge	.+10     	; 0x900 <main+0x15e>
		__ticks = 1;
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	98 8f       	std	Y+24, r25	; 0x18
 8fc:	8f 8b       	std	Y+23, r24	; 0x17
 8fe:	3b c0       	rjmp	.+118    	; 0x976 <main+0x1d4>
	else if (__tmp > 65535)
 900:	20 e0       	ldi	r18, 0x00	; 0
 902:	3f ef       	ldi	r19, 0xFF	; 255
 904:	4f e7       	ldi	r20, 0x7F	; 127
 906:	57 e4       	ldi	r21, 0x47	; 71
 908:	6b 89       	ldd	r22, Y+19	; 0x13
 90a:	7c 89       	ldd	r23, Y+20	; 0x14
 90c:	8d 89       	ldd	r24, Y+21	; 0x15
 90e:	9e 89       	ldd	r25, Y+22	; 0x16
 910:	7d d1       	rcall	.+762    	; 0xc0c <__gesf2>
 912:	18 16       	cp	r1, r24
 914:	3c f5       	brge	.+78     	; 0x964 <main+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 916:	20 e0       	ldi	r18, 0x00	; 0
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	40 e2       	ldi	r20, 0x20	; 32
 91c:	51 e4       	ldi	r21, 0x41	; 65
 91e:	6f 85       	ldd	r22, Y+15	; 0x0f
 920:	78 89       	ldd	r23, Y+16	; 0x10
 922:	89 89       	ldd	r24, Y+17	; 0x11
 924:	9a 89       	ldd	r25, Y+18	; 0x12
 926:	76 d1       	rcall	.+748    	; 0xc14 <__mulsf3>
 928:	dc 01       	movw	r26, r24
 92a:	cb 01       	movw	r24, r22
 92c:	bc 01       	movw	r22, r24
 92e:	cd 01       	movw	r24, r26
 930:	f4 d0       	rcall	.+488    	; 0xb1a <__fixunssfsi>
 932:	dc 01       	movw	r26, r24
 934:	cb 01       	movw	r24, r22
 936:	98 8f       	std	Y+24, r25	; 0x18
 938:	8f 8b       	std	Y+23, r24	; 0x17
 93a:	0f c0       	rjmp	.+30     	; 0x95a <main+0x1b8>
 93c:	80 e9       	ldi	r24, 0x90	; 144
 93e:	91 e0       	ldi	r25, 0x01	; 1
 940:	9a 8f       	std	Y+26, r25	; 0x1a
 942:	89 8f       	std	Y+25, r24	; 0x19
 944:	89 8d       	ldd	r24, Y+25	; 0x19
 946:	9a 8d       	ldd	r25, Y+26	; 0x1a
 948:	01 97       	sbiw	r24, 0x01	; 1
 94a:	f1 f7       	brne	.-4      	; 0x948 <main+0x1a6>
 94c:	9a 8f       	std	Y+26, r25	; 0x1a
 94e:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 950:	8f 89       	ldd	r24, Y+23	; 0x17
 952:	98 8d       	ldd	r25, Y+24	; 0x18
 954:	01 97       	sbiw	r24, 0x01	; 1
 956:	98 8f       	std	Y+24, r25	; 0x18
 958:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 95a:	8f 89       	ldd	r24, Y+23	; 0x17
 95c:	98 8d       	ldd	r25, Y+24	; 0x18
 95e:	89 2b       	or	r24, r25
 960:	69 f7       	brne	.-38     	; 0x93c <main+0x19a>
 962:	13 c0       	rjmp	.+38     	; 0x98a <main+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 964:	6b 89       	ldd	r22, Y+19	; 0x13
 966:	7c 89       	ldd	r23, Y+20	; 0x14
 968:	8d 89       	ldd	r24, Y+21	; 0x15
 96a:	9e 89       	ldd	r25, Y+22	; 0x16
 96c:	d6 d0       	rcall	.+428    	; 0xb1a <__fixunssfsi>
 96e:	dc 01       	movw	r26, r24
 970:	cb 01       	movw	r24, r22
 972:	98 8f       	std	Y+24, r25	; 0x18
 974:	8f 8b       	std	Y+23, r24	; 0x17
 976:	8f 89       	ldd	r24, Y+23	; 0x17
 978:	98 8d       	ldd	r25, Y+24	; 0x18
 97a:	9c 8f       	std	Y+28, r25	; 0x1c
 97c:	8b 8f       	std	Y+27, r24	; 0x1b
 97e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 980:	9c 8d       	ldd	r25, Y+28	; 0x1c
 982:	01 97       	sbiw	r24, 0x01	; 1
 984:	f1 f7       	brne	.-4      	; 0x982 <main+0x1e0>
 986:	9c 8f       	std	Y+28, r25	; 0x1c
 988:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1000);

	while (1){
		led0.toggle();
 98a:	80 e0       	ldi	r24, 0x00	; 0
 98c:	92 e0       	ldi	r25, 0x02	; 2
 98e:	9a de       	rcall	.-716    	; 0x6c4 <_ZN4GPIO6toggleEv>
		led13.toggle();
 990:	82 e0       	ldi	r24, 0x02	; 2
 992:	92 e0       	ldi	r25, 0x02	; 2
 994:	97 de       	rcall	.-722    	; 0x6c4 <_ZN4GPIO6toggleEv>
 996:	80 e0       	ldi	r24, 0x00	; 0
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	aa e7       	ldi	r26, 0x7A	; 122
 99c:	b4 e4       	ldi	r27, 0x44	; 68
 99e:	8d 8f       	std	Y+29, r24	; 0x1d
 9a0:	9e 8f       	std	Y+30, r25	; 0x1e
 9a2:	af 8f       	std	Y+31, r26	; 0x1f
 9a4:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 9a6:	20 e0       	ldi	r18, 0x00	; 0
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	4a e7       	ldi	r20, 0x7A	; 122
 9ac:	55 e4       	ldi	r21, 0x45	; 69
 9ae:	6d 8d       	ldd	r22, Y+29	; 0x1d
 9b0:	7e 8d       	ldd	r23, Y+30	; 0x1e
 9b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
 9b4:	98 a1       	ldd	r25, Y+32	; 0x20
 9b6:	2e d1       	rcall	.+604    	; 0xc14 <__mulsf3>
 9b8:	dc 01       	movw	r26, r24
 9ba:	cb 01       	movw	r24, r22
 9bc:	89 a3       	std	Y+33, r24	; 0x21
 9be:	9a a3       	std	Y+34, r25	; 0x22
 9c0:	ab a3       	std	Y+35, r26	; 0x23
 9c2:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
 9c4:	20 e0       	ldi	r18, 0x00	; 0
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	40 e8       	ldi	r20, 0x80	; 128
 9ca:	5f e3       	ldi	r21, 0x3F	; 63
 9cc:	69 a1       	ldd	r22, Y+33	; 0x21
 9ce:	7a a1       	ldd	r23, Y+34	; 0x22
 9d0:	8b a1       	ldd	r24, Y+35	; 0x23
 9d2:	9c a1       	ldd	r25, Y+36	; 0x24
 9d4:	9e d0       	rcall	.+316    	; 0xb12 <__cmpsf2>
 9d6:	88 23       	and	r24, r24
 9d8:	2c f4       	brge	.+10     	; 0x9e4 <main+0x242>
		__ticks = 1;
 9da:	81 e0       	ldi	r24, 0x01	; 1
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	9e a3       	std	Y+38, r25	; 0x26
 9e0:	8d a3       	std	Y+37, r24	; 0x25
 9e2:	3b c0       	rjmp	.+118    	; 0xa5a <main+0x2b8>
	else if (__tmp > 65535)
 9e4:	20 e0       	ldi	r18, 0x00	; 0
 9e6:	3f ef       	ldi	r19, 0xFF	; 255
 9e8:	4f e7       	ldi	r20, 0x7F	; 127
 9ea:	57 e4       	ldi	r21, 0x47	; 71
 9ec:	69 a1       	ldd	r22, Y+33	; 0x21
 9ee:	7a a1       	ldd	r23, Y+34	; 0x22
 9f0:	8b a1       	ldd	r24, Y+35	; 0x23
 9f2:	9c a1       	ldd	r25, Y+36	; 0x24
 9f4:	0b d1       	rcall	.+534    	; 0xc0c <__gesf2>
 9f6:	18 16       	cp	r1, r24
 9f8:	3c f5       	brge	.+78     	; 0xa48 <main+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 9fa:	20 e0       	ldi	r18, 0x00	; 0
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	40 e2       	ldi	r20, 0x20	; 32
 a00:	51 e4       	ldi	r21, 0x41	; 65
 a02:	6d 8d       	ldd	r22, Y+29	; 0x1d
 a04:	7e 8d       	ldd	r23, Y+30	; 0x1e
 a06:	8f 8d       	ldd	r24, Y+31	; 0x1f
 a08:	98 a1       	ldd	r25, Y+32	; 0x20
 a0a:	04 d1       	rcall	.+520    	; 0xc14 <__mulsf3>
 a0c:	dc 01       	movw	r26, r24
 a0e:	cb 01       	movw	r24, r22
 a10:	bc 01       	movw	r22, r24
 a12:	cd 01       	movw	r24, r26
 a14:	82 d0       	rcall	.+260    	; 0xb1a <__fixunssfsi>
 a16:	dc 01       	movw	r26, r24
 a18:	cb 01       	movw	r24, r22
 a1a:	9e a3       	std	Y+38, r25	; 0x26
 a1c:	8d a3       	std	Y+37, r24	; 0x25
 a1e:	0f c0       	rjmp	.+30     	; 0xa3e <main+0x29c>
 a20:	80 e9       	ldi	r24, 0x90	; 144
 a22:	91 e0       	ldi	r25, 0x01	; 1
 a24:	98 a7       	std	Y+40, r25	; 0x28
 a26:	8f a3       	std	Y+39, r24	; 0x27
 a28:	8f a1       	ldd	r24, Y+39	; 0x27
 a2a:	98 a5       	ldd	r25, Y+40	; 0x28
 a2c:	01 97       	sbiw	r24, 0x01	; 1
 a2e:	f1 f7       	brne	.-4      	; 0xa2c <main+0x28a>
 a30:	98 a7       	std	Y+40, r25	; 0x28
 a32:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a34:	8d a1       	ldd	r24, Y+37	; 0x25
 a36:	9e a1       	ldd	r25, Y+38	; 0x26
 a38:	01 97       	sbiw	r24, 0x01	; 1
 a3a:	9e a3       	std	Y+38, r25	; 0x26
 a3c:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a3e:	8d a1       	ldd	r24, Y+37	; 0x25
 a40:	9e a1       	ldd	r25, Y+38	; 0x26
 a42:	89 2b       	or	r24, r25
 a44:	69 f7       	brne	.-38     	; 0xa20 <main+0x27e>
 a46:	13 c0       	rjmp	.+38     	; 0xa6e <main+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 a48:	69 a1       	ldd	r22, Y+33	; 0x21
 a4a:	7a a1       	ldd	r23, Y+34	; 0x22
 a4c:	8b a1       	ldd	r24, Y+35	; 0x23
 a4e:	9c a1       	ldd	r25, Y+36	; 0x24
 a50:	64 d0       	rcall	.+200    	; 0xb1a <__fixunssfsi>
 a52:	dc 01       	movw	r26, r24
 a54:	cb 01       	movw	r24, r22
 a56:	9e a3       	std	Y+38, r25	; 0x26
 a58:	8d a3       	std	Y+37, r24	; 0x25
 a5a:	8d a1       	ldd	r24, Y+37	; 0x25
 a5c:	9e a1       	ldd	r25, Y+38	; 0x26
 a5e:	9a a7       	std	Y+42, r25	; 0x2a
 a60:	89 a7       	std	Y+41, r24	; 0x29
 a62:	89 a5       	ldd	r24, Y+41	; 0x29
 a64:	9a a5       	ldd	r25, Y+42	; 0x2a
 a66:	01 97       	sbiw	r24, 0x01	; 1
 a68:	f1 f7       	brne	.-4      	; 0xa66 <main+0x2c4>
 a6a:	9a a7       	std	Y+42, r25	; 0x2a
 a6c:	89 a7       	std	Y+41, r24	; 0x29
#include "gpio.h"

GPIO led0(0,   GPIO::OUTPUT); //PE0
GPIO led13(13, GPIO::OUTPUT); //PB7

int main(void){
 a6e:	8d cf       	rjmp	.-230    	; 0x98a <main+0x1e8>

00000a70 <_Z41__static_initialization_and_destruction_0ii>:
		led0.toggle();
		led13.toggle();
		_delay_ms(1000);
	}

}
 a70:	cf 93       	push	r28
 a72:	df 93       	push	r29
 a74:	00 d0       	rcall	.+0      	; 0xa76 <_Z41__static_initialization_and_destruction_0ii+0x6>
 a76:	1f 92       	push	r1
 a78:	cd b7       	in	r28, 0x3d	; 61
 a7a:	de b7       	in	r29, 0x3e	; 62
 a7c:	9a 83       	std	Y+2, r25	; 0x02
 a7e:	89 83       	std	Y+1, r24	; 0x01
 a80:	7c 83       	std	Y+4, r23	; 0x04
 a82:	6b 83       	std	Y+3, r22	; 0x03
 a84:	89 81       	ldd	r24, Y+1	; 0x01
 a86:	9a 81       	ldd	r25, Y+2	; 0x02
 a88:	01 97       	sbiw	r24, 0x01	; 1
 a8a:	71 f4       	brne	.+28     	; 0xaa8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 a8c:	8b 81       	ldd	r24, Y+3	; 0x03
 a8e:	9c 81       	ldd	r25, Y+4	; 0x04
 a90:	01 96       	adiw	r24, 0x01	; 1
 a92:	51 f4       	brne	.+20     	; 0xaa8 <_Z41__static_initialization_and_destruction_0ii+0x38>
#include <avr/io.h>
#include <util/delay.h>
#include "gpio.h"

GPIO led0(0,   GPIO::OUTPUT); //PE0
 a94:	41 e0       	ldi	r20, 0x01	; 1
 a96:	60 e0       	ldi	r22, 0x00	; 0
 a98:	80 e0       	ldi	r24, 0x00	; 0
 a9a:	92 e0       	ldi	r25, 0x02	; 2
 a9c:	71 db       	rcall	.-2334   	; 0x180 <_ZN4GPIOC1EhNS_15PortDirection_tE>
GPIO led13(13, GPIO::OUTPUT); //PB7
 a9e:	41 e0       	ldi	r20, 0x01	; 1
 aa0:	6d e0       	ldi	r22, 0x0D	; 13
 aa2:	82 e0       	ldi	r24, 0x02	; 2
 aa4:	92 e0       	ldi	r25, 0x02	; 2
 aa6:	6c db       	rcall	.-2344   	; 0x180 <_ZN4GPIOC1EhNS_15PortDirection_tE>
 aa8:	89 81       	ldd	r24, Y+1	; 0x01
 aaa:	9a 81       	ldd	r25, Y+2	; 0x02
 aac:	89 2b       	or	r24, r25
 aae:	51 f4       	brne	.+20     	; 0xac4 <_Z41__static_initialization_and_destruction_0ii+0x54>
 ab0:	8b 81       	ldd	r24, Y+3	; 0x03
 ab2:	9c 81       	ldd	r25, Y+4	; 0x04
 ab4:	01 96       	adiw	r24, 0x01	; 1
 ab6:	31 f4       	brne	.+12     	; 0xac4 <_Z41__static_initialization_and_destruction_0ii+0x54>
 ab8:	82 e0       	ldi	r24, 0x02	; 2
 aba:	92 e0       	ldi	r25, 0x02	; 2
 abc:	ed dc       	rcall	.-1574   	; 0x498 <_ZN4GPIOD1Ev>
#include <avr/io.h>
#include <util/delay.h>
#include "gpio.h"

GPIO led0(0,   GPIO::OUTPUT); //PE0
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	92 e0       	ldi	r25, 0x02	; 2
 ac2:	ea dc       	rcall	.-1580   	; 0x498 <_ZN4GPIOD1Ev>
		led0.toggle();
		led13.toggle();
		_delay_ms(1000);
	}

}
 ac4:	0f 90       	pop	r0
 ac6:	0f 90       	pop	r0
 ac8:	0f 90       	pop	r0
 aca:	0f 90       	pop	r0
 acc:	df 91       	pop	r29
 ace:	cf 91       	pop	r28
 ad0:	08 95       	ret

00000ad2 <_GLOBAL__sub_I_led0>:
 ad2:	cf 93       	push	r28
 ad4:	df 93       	push	r29
 ad6:	cd b7       	in	r28, 0x3d	; 61
 ad8:	de b7       	in	r29, 0x3e	; 62
 ada:	6f ef       	ldi	r22, 0xFF	; 255
 adc:	7f ef       	ldi	r23, 0xFF	; 255
 ade:	81 e0       	ldi	r24, 0x01	; 1
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	c6 df       	rcall	.-116    	; 0xa70 <_Z41__static_initialization_and_destruction_0ii>
 ae4:	df 91       	pop	r29
 ae6:	cf 91       	pop	r28
 ae8:	08 95       	ret

00000aea <_GLOBAL__sub_D_led0>:
 aea:	cf 93       	push	r28
 aec:	df 93       	push	r29
 aee:	cd b7       	in	r28, 0x3d	; 61
 af0:	de b7       	in	r29, 0x3e	; 62
 af2:	6f ef       	ldi	r22, 0xFF	; 255
 af4:	7f ef       	ldi	r23, 0xFF	; 255
 af6:	80 e0       	ldi	r24, 0x00	; 0
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	ba df       	rcall	.-140    	; 0xa70 <_Z41__static_initialization_and_destruction_0ii>
 afc:	df 91       	pop	r29
 afe:	cf 91       	pop	r28
 b00:	08 95       	ret

00000b02 <__tablejump2__>:
 b02:	ee 0f       	add	r30, r30
 b04:	ff 1f       	adc	r31, r31
 b06:	88 1f       	adc	r24, r24
 b08:	8b bf       	out	0x3b, r24	; 59
 b0a:	07 90       	elpm	r0, Z+
 b0c:	f6 91       	elpm	r31, Z
 b0e:	e0 2d       	mov	r30, r0
 b10:	19 94       	eijmp

00000b12 <__cmpsf2>:
 b12:	2f d0       	rcall	.+94     	; 0xb72 <__fp_cmp>
 b14:	08 f4       	brcc	.+2      	; 0xb18 <__cmpsf2+0x6>
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	08 95       	ret

00000b1a <__fixunssfsi>:
 b1a:	57 d0       	rcall	.+174    	; 0xbca <__fp_splitA>
 b1c:	88 f0       	brcs	.+34     	; 0xb40 <__fixunssfsi+0x26>
 b1e:	9f 57       	subi	r25, 0x7F	; 127
 b20:	90 f0       	brcs	.+36     	; 0xb46 <__fixunssfsi+0x2c>
 b22:	b9 2f       	mov	r27, r25
 b24:	99 27       	eor	r25, r25
 b26:	b7 51       	subi	r27, 0x17	; 23
 b28:	a0 f0       	brcs	.+40     	; 0xb52 <__fixunssfsi+0x38>
 b2a:	d1 f0       	breq	.+52     	; 0xb60 <__fixunssfsi+0x46>
 b2c:	66 0f       	add	r22, r22
 b2e:	77 1f       	adc	r23, r23
 b30:	88 1f       	adc	r24, r24
 b32:	99 1f       	adc	r25, r25
 b34:	1a f0       	brmi	.+6      	; 0xb3c <__fixunssfsi+0x22>
 b36:	ba 95       	dec	r27
 b38:	c9 f7       	brne	.-14     	; 0xb2c <__fixunssfsi+0x12>
 b3a:	12 c0       	rjmp	.+36     	; 0xb60 <__fixunssfsi+0x46>
 b3c:	b1 30       	cpi	r27, 0x01	; 1
 b3e:	81 f0       	breq	.+32     	; 0xb60 <__fixunssfsi+0x46>
 b40:	5e d0       	rcall	.+188    	; 0xbfe <__fp_zero>
 b42:	b1 e0       	ldi	r27, 0x01	; 1
 b44:	08 95       	ret
 b46:	5b c0       	rjmp	.+182    	; 0xbfe <__fp_zero>
 b48:	67 2f       	mov	r22, r23
 b4a:	78 2f       	mov	r23, r24
 b4c:	88 27       	eor	r24, r24
 b4e:	b8 5f       	subi	r27, 0xF8	; 248
 b50:	39 f0       	breq	.+14     	; 0xb60 <__fixunssfsi+0x46>
 b52:	b9 3f       	cpi	r27, 0xF9	; 249
 b54:	cc f3       	brlt	.-14     	; 0xb48 <__fixunssfsi+0x2e>
 b56:	86 95       	lsr	r24
 b58:	77 95       	ror	r23
 b5a:	67 95       	ror	r22
 b5c:	b3 95       	inc	r27
 b5e:	d9 f7       	brne	.-10     	; 0xb56 <__fixunssfsi+0x3c>
 b60:	3e f4       	brtc	.+14     	; 0xb70 <__fixunssfsi+0x56>
 b62:	90 95       	com	r25
 b64:	80 95       	com	r24
 b66:	70 95       	com	r23
 b68:	61 95       	neg	r22
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255
 b6c:	8f 4f       	sbci	r24, 0xFF	; 255
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	08 95       	ret

00000b72 <__fp_cmp>:
 b72:	99 0f       	add	r25, r25
 b74:	00 08       	sbc	r0, r0
 b76:	55 0f       	add	r21, r21
 b78:	aa 0b       	sbc	r26, r26
 b7a:	e0 e8       	ldi	r30, 0x80	; 128
 b7c:	fe ef       	ldi	r31, 0xFE	; 254
 b7e:	16 16       	cp	r1, r22
 b80:	17 06       	cpc	r1, r23
 b82:	e8 07       	cpc	r30, r24
 b84:	f9 07       	cpc	r31, r25
 b86:	c0 f0       	brcs	.+48     	; 0xbb8 <__fp_cmp+0x46>
 b88:	12 16       	cp	r1, r18
 b8a:	13 06       	cpc	r1, r19
 b8c:	e4 07       	cpc	r30, r20
 b8e:	f5 07       	cpc	r31, r21
 b90:	98 f0       	brcs	.+38     	; 0xbb8 <__fp_cmp+0x46>
 b92:	62 1b       	sub	r22, r18
 b94:	73 0b       	sbc	r23, r19
 b96:	84 0b       	sbc	r24, r20
 b98:	95 0b       	sbc	r25, r21
 b9a:	39 f4       	brne	.+14     	; 0xbaa <__fp_cmp+0x38>
 b9c:	0a 26       	eor	r0, r26
 b9e:	61 f0       	breq	.+24     	; 0xbb8 <__fp_cmp+0x46>
 ba0:	23 2b       	or	r18, r19
 ba2:	24 2b       	or	r18, r20
 ba4:	25 2b       	or	r18, r21
 ba6:	21 f4       	brne	.+8      	; 0xbb0 <__fp_cmp+0x3e>
 ba8:	08 95       	ret
 baa:	0a 26       	eor	r0, r26
 bac:	09 f4       	brne	.+2      	; 0xbb0 <__fp_cmp+0x3e>
 bae:	a1 40       	sbci	r26, 0x01	; 1
 bb0:	a6 95       	lsr	r26
 bb2:	8f ef       	ldi	r24, 0xFF	; 255
 bb4:	81 1d       	adc	r24, r1
 bb6:	81 1d       	adc	r24, r1
 bb8:	08 95       	ret

00000bba <__fp_split3>:
 bba:	57 fd       	sbrc	r21, 7
 bbc:	90 58       	subi	r25, 0x80	; 128
 bbe:	44 0f       	add	r20, r20
 bc0:	55 1f       	adc	r21, r21
 bc2:	59 f0       	breq	.+22     	; 0xbda <__fp_splitA+0x10>
 bc4:	5f 3f       	cpi	r21, 0xFF	; 255
 bc6:	71 f0       	breq	.+28     	; 0xbe4 <__fp_splitA+0x1a>
 bc8:	47 95       	ror	r20

00000bca <__fp_splitA>:
 bca:	88 0f       	add	r24, r24
 bcc:	97 fb       	bst	r25, 7
 bce:	99 1f       	adc	r25, r25
 bd0:	61 f0       	breq	.+24     	; 0xbea <__fp_splitA+0x20>
 bd2:	9f 3f       	cpi	r25, 0xFF	; 255
 bd4:	79 f0       	breq	.+30     	; 0xbf4 <__fp_splitA+0x2a>
 bd6:	87 95       	ror	r24
 bd8:	08 95       	ret
 bda:	12 16       	cp	r1, r18
 bdc:	13 06       	cpc	r1, r19
 bde:	14 06       	cpc	r1, r20
 be0:	55 1f       	adc	r21, r21
 be2:	f2 cf       	rjmp	.-28     	; 0xbc8 <__fp_split3+0xe>
 be4:	46 95       	lsr	r20
 be6:	f1 df       	rcall	.-30     	; 0xbca <__fp_splitA>
 be8:	08 c0       	rjmp	.+16     	; 0xbfa <__fp_splitA+0x30>
 bea:	16 16       	cp	r1, r22
 bec:	17 06       	cpc	r1, r23
 bee:	18 06       	cpc	r1, r24
 bf0:	99 1f       	adc	r25, r25
 bf2:	f1 cf       	rjmp	.-30     	; 0xbd6 <__fp_splitA+0xc>
 bf4:	86 95       	lsr	r24
 bf6:	71 05       	cpc	r23, r1
 bf8:	61 05       	cpc	r22, r1
 bfa:	08 94       	sec
 bfc:	08 95       	ret

00000bfe <__fp_zero>:
 bfe:	e8 94       	clt

00000c00 <__fp_szero>:
 c00:	bb 27       	eor	r27, r27
 c02:	66 27       	eor	r22, r22
 c04:	77 27       	eor	r23, r23
 c06:	cb 01       	movw	r24, r22
 c08:	97 f9       	bld	r25, 7
 c0a:	08 95       	ret

00000c0c <__gesf2>:
 c0c:	b2 df       	rcall	.-156    	; 0xb72 <__fp_cmp>
 c0e:	08 f4       	brcc	.+2      	; 0xc12 <__gesf2+0x6>
 c10:	8f ef       	ldi	r24, 0xFF	; 255
 c12:	08 95       	ret

00000c14 <__mulsf3>:
 c14:	0b d0       	rcall	.+22     	; 0xc2c <__mulsf3x>
 c16:	78 c0       	rjmp	.+240    	; 0xd08 <__fp_round>
 c18:	69 d0       	rcall	.+210    	; 0xcec <__fp_pscA>
 c1a:	28 f0       	brcs	.+10     	; 0xc26 <__mulsf3+0x12>
 c1c:	6e d0       	rcall	.+220    	; 0xcfa <__fp_pscB>
 c1e:	18 f0       	brcs	.+6      	; 0xc26 <__mulsf3+0x12>
 c20:	95 23       	and	r25, r21
 c22:	09 f0       	breq	.+2      	; 0xc26 <__mulsf3+0x12>
 c24:	5a c0       	rjmp	.+180    	; 0xcda <__fp_inf>
 c26:	5f c0       	rjmp	.+190    	; 0xce6 <__fp_nan>
 c28:	11 24       	eor	r1, r1
 c2a:	ea cf       	rjmp	.-44     	; 0xc00 <__fp_szero>

00000c2c <__mulsf3x>:
 c2c:	c6 df       	rcall	.-116    	; 0xbba <__fp_split3>
 c2e:	a0 f3       	brcs	.-24     	; 0xc18 <__mulsf3+0x4>

00000c30 <__mulsf3_pse>:
 c30:	95 9f       	mul	r25, r21
 c32:	d1 f3       	breq	.-12     	; 0xc28 <__mulsf3+0x14>
 c34:	95 0f       	add	r25, r21
 c36:	50 e0       	ldi	r21, 0x00	; 0
 c38:	55 1f       	adc	r21, r21
 c3a:	62 9f       	mul	r22, r18
 c3c:	f0 01       	movw	r30, r0
 c3e:	72 9f       	mul	r23, r18
 c40:	bb 27       	eor	r27, r27
 c42:	f0 0d       	add	r31, r0
 c44:	b1 1d       	adc	r27, r1
 c46:	63 9f       	mul	r22, r19
 c48:	aa 27       	eor	r26, r26
 c4a:	f0 0d       	add	r31, r0
 c4c:	b1 1d       	adc	r27, r1
 c4e:	aa 1f       	adc	r26, r26
 c50:	64 9f       	mul	r22, r20
 c52:	66 27       	eor	r22, r22
 c54:	b0 0d       	add	r27, r0
 c56:	a1 1d       	adc	r26, r1
 c58:	66 1f       	adc	r22, r22
 c5a:	82 9f       	mul	r24, r18
 c5c:	22 27       	eor	r18, r18
 c5e:	b0 0d       	add	r27, r0
 c60:	a1 1d       	adc	r26, r1
 c62:	62 1f       	adc	r22, r18
 c64:	73 9f       	mul	r23, r19
 c66:	b0 0d       	add	r27, r0
 c68:	a1 1d       	adc	r26, r1
 c6a:	62 1f       	adc	r22, r18
 c6c:	83 9f       	mul	r24, r19
 c6e:	a0 0d       	add	r26, r0
 c70:	61 1d       	adc	r22, r1
 c72:	22 1f       	adc	r18, r18
 c74:	74 9f       	mul	r23, r20
 c76:	33 27       	eor	r19, r19
 c78:	a0 0d       	add	r26, r0
 c7a:	61 1d       	adc	r22, r1
 c7c:	23 1f       	adc	r18, r19
 c7e:	84 9f       	mul	r24, r20
 c80:	60 0d       	add	r22, r0
 c82:	21 1d       	adc	r18, r1
 c84:	82 2f       	mov	r24, r18
 c86:	76 2f       	mov	r23, r22
 c88:	6a 2f       	mov	r22, r26
 c8a:	11 24       	eor	r1, r1
 c8c:	9f 57       	subi	r25, 0x7F	; 127
 c8e:	50 40       	sbci	r21, 0x00	; 0
 c90:	8a f0       	brmi	.+34     	; 0xcb4 <__mulsf3_pse+0x84>
 c92:	e1 f0       	breq	.+56     	; 0xccc <__mulsf3_pse+0x9c>
 c94:	88 23       	and	r24, r24
 c96:	4a f0       	brmi	.+18     	; 0xcaa <__mulsf3_pse+0x7a>
 c98:	ee 0f       	add	r30, r30
 c9a:	ff 1f       	adc	r31, r31
 c9c:	bb 1f       	adc	r27, r27
 c9e:	66 1f       	adc	r22, r22
 ca0:	77 1f       	adc	r23, r23
 ca2:	88 1f       	adc	r24, r24
 ca4:	91 50       	subi	r25, 0x01	; 1
 ca6:	50 40       	sbci	r21, 0x00	; 0
 ca8:	a9 f7       	brne	.-22     	; 0xc94 <__mulsf3_pse+0x64>
 caa:	9e 3f       	cpi	r25, 0xFE	; 254
 cac:	51 05       	cpc	r21, r1
 cae:	70 f0       	brcs	.+28     	; 0xccc <__mulsf3_pse+0x9c>
 cb0:	14 c0       	rjmp	.+40     	; 0xcda <__fp_inf>
 cb2:	a6 cf       	rjmp	.-180    	; 0xc00 <__fp_szero>
 cb4:	5f 3f       	cpi	r21, 0xFF	; 255
 cb6:	ec f3       	brlt	.-6      	; 0xcb2 <__mulsf3_pse+0x82>
 cb8:	98 3e       	cpi	r25, 0xE8	; 232
 cba:	dc f3       	brlt	.-10     	; 0xcb2 <__mulsf3_pse+0x82>
 cbc:	86 95       	lsr	r24
 cbe:	77 95       	ror	r23
 cc0:	67 95       	ror	r22
 cc2:	b7 95       	ror	r27
 cc4:	f7 95       	ror	r31
 cc6:	e7 95       	ror	r30
 cc8:	9f 5f       	subi	r25, 0xFF	; 255
 cca:	c1 f7       	brne	.-16     	; 0xcbc <__mulsf3_pse+0x8c>
 ccc:	fe 2b       	or	r31, r30
 cce:	88 0f       	add	r24, r24
 cd0:	91 1d       	adc	r25, r1
 cd2:	96 95       	lsr	r25
 cd4:	87 95       	ror	r24
 cd6:	97 f9       	bld	r25, 7
 cd8:	08 95       	ret

00000cda <__fp_inf>:
 cda:	97 f9       	bld	r25, 7
 cdc:	9f 67       	ori	r25, 0x7F	; 127
 cde:	80 e8       	ldi	r24, 0x80	; 128
 ce0:	70 e0       	ldi	r23, 0x00	; 0
 ce2:	60 e0       	ldi	r22, 0x00	; 0
 ce4:	08 95       	ret

00000ce6 <__fp_nan>:
 ce6:	9f ef       	ldi	r25, 0xFF	; 255
 ce8:	80 ec       	ldi	r24, 0xC0	; 192
 cea:	08 95       	ret

00000cec <__fp_pscA>:
 cec:	00 24       	eor	r0, r0
 cee:	0a 94       	dec	r0
 cf0:	16 16       	cp	r1, r22
 cf2:	17 06       	cpc	r1, r23
 cf4:	18 06       	cpc	r1, r24
 cf6:	09 06       	cpc	r0, r25
 cf8:	08 95       	ret

00000cfa <__fp_pscB>:
 cfa:	00 24       	eor	r0, r0
 cfc:	0a 94       	dec	r0
 cfe:	12 16       	cp	r1, r18
 d00:	13 06       	cpc	r1, r19
 d02:	14 06       	cpc	r1, r20
 d04:	05 06       	cpc	r0, r21
 d06:	08 95       	ret

00000d08 <__fp_round>:
 d08:	09 2e       	mov	r0, r25
 d0a:	03 94       	inc	r0
 d0c:	00 0c       	add	r0, r0
 d0e:	11 f4       	brne	.+4      	; 0xd14 <__fp_round+0xc>
 d10:	88 23       	and	r24, r24
 d12:	52 f0       	brmi	.+20     	; 0xd28 <__fp_round+0x20>
 d14:	bb 0f       	add	r27, r27
 d16:	40 f4       	brcc	.+16     	; 0xd28 <__fp_round+0x20>
 d18:	bf 2b       	or	r27, r31
 d1a:	11 f4       	brne	.+4      	; 0xd20 <__fp_round+0x18>
 d1c:	60 ff       	sbrs	r22, 0
 d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__fp_round+0x20>
 d20:	6f 5f       	subi	r22, 0xFF	; 255
 d22:	7f 4f       	sbci	r23, 0xFF	; 255
 d24:	8f 4f       	sbci	r24, 0xFF	; 255
 d26:	9f 4f       	sbci	r25, 0xFF	; 255
 d28:	08 95       	ret

00000d2a <__do_global_dtors>:
 d2a:	10 e0       	ldi	r17, 0x00	; 0
 d2c:	cd e9       	ldi	r28, 0x9D	; 157
 d2e:	d0 e0       	ldi	r29, 0x00	; 0
 d30:	00 e0       	ldi	r16, 0x00	; 0
 d32:	05 c0       	rjmp	.+10     	; 0xd3e <__do_global_dtors+0x14>
 d34:	80 2f       	mov	r24, r16
 d36:	fe 01       	movw	r30, r28
 d38:	e4 de       	rcall	.-568    	; 0xb02 <__tablejump2__>
 d3a:	21 96       	adiw	r28, 0x01	; 1
 d3c:	01 1d       	adc	r16, r1
 d3e:	ce 39       	cpi	r28, 0x9E	; 158
 d40:	d1 07       	cpc	r29, r17
 d42:	80 e0       	ldi	r24, 0x00	; 0
 d44:	08 07       	cpc	r16, r24
 d46:	b1 f7       	brne	.-20     	; 0xd34 <__do_global_dtors+0xa>
 d48:	f8 94       	cli

00000d4a <__stop_program>:
 d4a:	ff cf       	rjmp	.-2      	; 0xd4a <__stop_program>
