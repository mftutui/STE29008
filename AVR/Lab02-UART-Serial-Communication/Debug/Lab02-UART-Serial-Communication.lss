
Lab02-UART-Serial-Communication.elf: formato do arquivo elf32-avr

Seções:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000060c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d25  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001571  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000bbc  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1a  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Desmontagem da seção .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	69 d0       	rcall	.+210    	; 0x1c8 <main>
  f6:	78 c0       	rjmp	.+240    	; 0x1e8 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_Z10USART_Initj>:
#define FOSC 16000000// Clock Speed
#define BAUD 9600
#define MYUBRR (FOSC/16/BAUD)-1

void USART_Init(unsigned int ubrr)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	1f 92       	push	r1
 100:	1f 92       	push	r1
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	9a 83       	std	Y+2, r25	; 0x02
 108:	89 83       	std	Y+1, r24	; 0x01
UBRR0H = (unsigned char)(ubrr>>8); //Ajusta a taxa de transmissão
 10a:	85 ec       	ldi	r24, 0xC5	; 197
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	29 81       	ldd	r18, Y+1	; 0x01
 110:	3a 81       	ldd	r19, Y+2	; 0x02
 112:	23 2f       	mov	r18, r19
 114:	33 27       	eor	r19, r19
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
UBRR0L = (unsigned char)ubrr;
 11a:	84 ec       	ldi	r24, 0xC4	; 196
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	29 81       	ldd	r18, Y+1	; 0x01
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 124:	81 ec       	ldi	r24, 0xC1	; 193
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	28 e1       	ldi	r18, 0x18	; 24
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
//Habilita o transmissor e o receptor

//Ajusta o formato do frame:
UCSR0C &= ~(1<<USBS0);
 12e:	82 ec       	ldi	r24, 0xC2	; 194
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	22 ec       	ldi	r18, 0xC2	; 194
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	f9 01       	movw	r30, r18
 138:	20 81       	ld	r18, Z
 13a:	27 7f       	andi	r18, 0xF7	; 247
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
UCSR0C |= (3<<UCSZ00);
 140:	82 ec       	ldi	r24, 0xC2	; 194
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	22 ec       	ldi	r18, 0xC2	; 194
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	f9 01       	movw	r30, r18
 14a:	20 81       	ld	r18, Z
 14c:	26 60       	ori	r18, 0x06	; 6
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
}
 152:	00 00       	nop
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <_Z13USART_Receivev>:

unsigned char USART_Receive()
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
 166:	80 ec       	ldi	r24, 0xC0	; 192
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	80 81       	ld	r24, Z
 16e:	80 95       	com	r24
 170:	88 1f       	adc	r24, r24
 172:	88 27       	eor	r24, r24
 174:	88 1f       	adc	r24, r24
 176:	88 23       	and	r24, r24
 178:	09 f0       	breq	.+2      	; 0x17c <_Z13USART_Receivev+0x1e>
 17a:	f5 cf       	rjmp	.-22     	; 0x166 <_Z13USART_Receivev+0x8>

	/* Get and return received data from buffer */
	return UDR0;
 17c:	86 ec       	ldi	r24, 0xC6	; 198
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	fc 01       	movw	r30, r24
 182:	80 81       	ld	r24, Z
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <_Z14USART_Transmith>:

void USART_Transmit( uint8_t data )
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	1f 92       	push	r1
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 196:	80 ec       	ldi	r24, 0xC0	; 192
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fc 01       	movw	r30, r24
 19c:	80 81       	ld	r24, Z
 19e:	88 2f       	mov	r24, r24
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	80 72       	andi	r24, 0x20	; 32
 1a4:	99 27       	eor	r25, r25
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	89 2b       	or	r24, r25
 1aa:	09 f0       	breq	.+2      	; 0x1ae <_Z14USART_Transmith+0x24>
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	22 23       	and	r18, r18
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <_Z14USART_Transmith+0x2a>
 1b2:	f1 cf       	rjmp	.-30     	; 0x196 <_Z14USART_Transmith+0xc>

	/* Put data into buffer, sends the data */
	UDR0 = data;
 1b4:	86 ec       	ldi	r24, 0xC6	; 198
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	29 81       	ldd	r18, Y+1	; 0x01
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
}
 1be:	00 00       	nop
 1c0:	0f 90       	pop	r0
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <main>:

int main( void )
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	1f 92       	push	r1
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	USART_Init(MYUBRR);
 1d2:	87 e6       	ldi	r24, 0x67	; 103
 1d4:	90 e0       	ldi	r25, 0x00	; 0
	while(true){
		uint8_t data;
		data = USART_Receive();
 1d6:	91 df       	rcall	.-222    	; 0xfa <_Z10USART_Initj>
 1d8:	c2 df       	rcall	.-124    	; 0x15e <_Z13USART_Receivev>
 1da:	89 83       	std	Y+1, r24	; 0x01
		data = data+1;
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	8f 5f       	subi	r24, 0xFF	; 255
		USART_Transmit(data);
 1e0:	89 83       	std	Y+1, r24	; 0x01
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	d2 df       	rcall	.-92     	; 0x18a <_Z14USART_Transmith>
}

int main( void )
{
	USART_Init(MYUBRR);
	while(true){
 1e6:	f8 cf       	rjmp	.-16     	; 0x1d8 <main+0x10>

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
